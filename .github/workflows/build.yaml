name: "Build Docker Images"
on:
  workflow_dispatch:
    inputs:
      components:
        default: '["base", "solr", "web", "worker"]'
        description: "Used to set your target for the components"
        required: false
        type: string
      image_name:
        description: "Docker image name part. Fills in ghcr.io/IMAGE_NAME. Typically this is the `repo_name`, but in some projects it might be `repo_name/sub_name`"
        type: string
      os:
        default: '["ubuntu-latest", "ubuntu-24.04-arm"]'
        description: "Used to set your target for the operating system"
        required: false
        type: string
      subdir:
        default: "."
        type: string
      tag:
        required: false
        type: string
  workflow_call:
    inputs:
      components:
        default: '["base", "solr", "web", "worker"]'
        description: "Used to set your target for the components"
        required: false
        type: string
      image_name:
        description: "Docker image name part. Fills in ghcr.io/IMAGE_NAME. Typically this is the `repo_name`, but in some projects it might be `repo_name/sub_name`"
        type: string
      os:
        default: '["ubuntu-latest", "ubuntu-24.04-arm"]'
        description: "Used to set your target for the operating system"
        required: false
        type: string
      subdir:
        default: "."
        type: string
      tag:
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  build:
    strategy:
      matrix:
        component: ${{fromJson(input.components)}}
        os: ${{fromJson(input.os)}}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Set platform from matrix
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "PLATFORM_TAG=amd64" >> $GITHUB_ENV
          else
            echo "PLATFORM_TAG=arm64" >> $GITHUB_ENV
          fi
      - id: setup
        name: Setup
        uses: notch8/actions/setup-env@enter_the_matrix
        with:
          tag: ${{ inputs.tag }}
          image_name: ${{ inputs.image_name }}
          token: ${{ secrets.CHECKOUT_TOKEN || secrets.GITHUB_TOKEN }}
          subdir: ${{ inputs.subdir }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_step == 'build' }}
        with:
          limit-access-to-actor: true
      - name: Build Prep
        run: |
          echo "Preparing build environment..."
          cd ${{ inputs.subdir }};
          [ -f "db/schema.rb" ] && chmod 777 db/schema.rb;
          [ -f "bin/checkout_all.sh" ] && ./bin/checkout_all.sh;
      - name: Build and push ${{ matrix.component }} on ${{ matrix.os }}
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.subdir }}
          platforms: linux/${{ env.PLATFORM_TAG }}
          target: ${{ matrix.component }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.action_repository }}}/${{ matrix.component }}:latest
          cache-to: type=inline
          push: true
          tags: |
            ${{ github.action_repository }}/${{ matrix.component }}:${{ env.TAG }}-${{ env.PLATFORM_TAG }}

  push:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - id: setup
        name: Setup
        uses: notch8/actions/setup-env@enter_the_matrix
        with:
          tag: ${{ inputs.tag }}
          image_name: ${{ inputs.image_name }}
          token: ${{ secrets.CHECKOUT_TOKEN || secrets.GITHUB_TOKEN }}
          subdir: ${{ inputs.subdir }}
      - name: Create multiarch manifests
        run: |
          components_list=$(echo '${{ inputs.components }}' | jq -r '.[]' | tr '\n' ' ')
          for component in $components_list; do
            docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$component:${{ env.TAG }} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$component:${{ env.TAG }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$component:${{ env.TAG }}-arm64
          done
