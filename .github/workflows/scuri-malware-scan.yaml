name: Sucuri Malware Scan
run-name: Sucuri Malware Scan of ${{ github.repository }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      url_to_scan:
        type: string
        description: 'The URL to be scanned by Sucuri'
        required: true
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled'
        required: false
        default: false
  workflow_call:
    inputs:
      url_to_scan:
        type: string
        description: 'The URL to be scanned by Sucuri'
        required: true
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled'
        required: false
        default: false

jobs:
  sucuri_scan:
    runs-on: macos-latest

    steps:
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: pip install selenium

    - name: Create and Write to File
      run: |
        cat <<EOL > sucuri_scan.py
        #!/usr/bin/env python3

        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC

        # Set up WebDriver options for headless mode
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')
        options.add_argument('--disable-gpu')
        options.add_argument('--no-sandbox')
        options.add_argument('--window-size=1920,1080')  # Set the dimensions of the viewport

        # Set up the WebDriver with the options
        driver = webdriver.Chrome(options=options)

        # Navigate to the Sucuri SiteCheck page
        driver.get('https://sitecheck.sucuri.net/')

        # Enter the URL to scan in the text box (assuming the text box has the name attribute "scan")
        url_to_scan = '${{ inputs.url_to_scan }}'
        driver.find_element(By.NAME, 'scan').send_keys(url_to_scan)

        # Click the "Scan Website" button to initiate the scan (locating the button by its type attribute using XPath)
        driver.find_element(By.XPATH, '//button[@type="submit"]').click()

        # Wait for the scan to complete and the results to load (assuming the results have the id "results")
        WebDriverWait(driver, 300).until(EC.presence_of_element_located((By.ID, 'results')))

        # Retrieve the HTML content of the results
        results_html = driver.find_element(By.ID, 'results').get_attribute('outerHTML')

        # Save the results to a file
        with open('sucuri_scan_report.html', 'w') as file:
            file.write(results_html)

        # Close the browser
        driver.quit()

        EOL

    - name: Give execute permissions
      run: chmod +x sucuri_scan.py

    - name: Run script
      run: ./sucuri_scan.py

    - name: Upload Sucuri Scan Report
      uses: actions/upload-artifact@v2
      with:
        name: sucuri-scan-report
        path: sucuri_scan_report.html

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      with:
        limit-access-to-actor: true

    - name: Check for Malware Warning
      id: check-warning
      run: |
        if grep -q 'No Malware Found' sucuri_scan_report.html; then
          echo 'MALWARE_DETECTED=false' >> $GITHUB_ENV
        else
          echo 'MALWARE_DETECTED=true' >> $GITHUB_ENV
        fi

    - name: Alert Slack on Malware Detection
      if: ${{ env.MALWARE_DETECTED == 'true' }}
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        fields: workflow,job,commit
        custom_payload: |
          {
            "text": ":warning: Malware Detected in ${{ github.repository }} during Sucuri Scan :warning:",
            "attachments": [
              {
                "color": "danger",
                "title": "Malware Detected in ${{ github.repository }}",
                "text": "A recent Sucuri scan detected malware in ${{ github.repository }}. Review the scan report for details.",
                "actions": [
                  {
                    "type": "button",
                    "text": "View Report",
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }}